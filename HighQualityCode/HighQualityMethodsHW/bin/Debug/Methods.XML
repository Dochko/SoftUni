<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Methods</name>
    </assembly>
    <members>
        <member name="T:Methods.MethodsMain">
            <summary>
            The main class of the project.
            </summary>
        </member>
        <member name="M:Methods.MethodsMain.Main">
            <summary>
            Defines the entry point of the application.
            </summary>
        </member>
        <member name="T:Methods.MethodsUtility.CalculationMethods">
            <summary>
            Contains methods for calculation.
            </summary>
        </member>
        <member name="M:Methods.MethodsUtility.CalculationMethods.CalcTriangleArea(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the triangle area by Heron's formula.
            </summary>
            <param name="a">Triangle side a.</param>
            <param name="b">Triangle side b.</param>
            <param name="c">Triangle side c.</param>
            <returns>Triangle's area.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">triangle side;Sides should be positive !</exception>
        </member>
        <member name="M:Methods.MethodsUtility.CalculationMethods.FindMaxNumber(System.Int32[])">
            <summary>
            Finds the maximum element in an array.
            </summary>
            <param name="numbers">Array of numbers.</param>
            <returns>The maximum number from the array.</returns>
            <exception cref="T:System.ArgumentNullException">numbers;The input array cannot be empty !</exception>
        </member>
        <member name="M:Methods.MethodsUtility.CalculationMethods.CalcDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance between two points.
            </summary>
            <param name="x1">The x coordinate of the first point.</param>
            <param name="y1">The y coordinate of the first point.</param>
            <param name="x2">The x coordinate of the second point.</param>
            <param name="y2">The y coordinate of the second point.</param>
            <returns>The distance between the points.</returns>
        </member>
        <member name="M:Methods.MethodsUtility.CalculationMethods.IsHorizontalLine(System.Double,System.Double)">
            <summary>
            Checks if the line crossing the two given points is horizontal.
            </summary>
            <param name="x1">The x coordinate of the first point.</param>
            <param name="x2">The x coordinate of the second point.</param>
            <returns>If the line is horizontal - true, otherwise - false.</returns>
        </member>
        <member name="M:Methods.MethodsUtility.CalculationMethods.IsVerticalLine(System.Double,System.Double)">
            <summary>
            Checks if the line crossing the two given points is vertical.
            </summary>
            <param name="y1">The y coordinate of the first point.</param>
            <param name="y2">The y coordinate of the second point.</param>
            <returns>If the line is vertical - true, otherwise - false.</returns>
        </member>
        <member name="T:Methods.MethodsUtility.FormattingMethods">
            <summary>
            Contains methods for formatting.
            </summary>
        </member>
        <member name="M:Methods.MethodsUtility.FormattingMethods.DigitToText(System.Int32)">
            <summary>
            Prints the text representation of the digits from 0-9.
            </summary>
            <param name="number">The digit.</param>
            <returns>String representation of the given digit.</returns>
        </member>
        <member name="M:Methods.MethodsUtility.FormattingMethods.PrintFormattedNumber(System.Object,System.String)">
            <summary>
            Formats a number according the given input string.
            </summary>
            <param name="number">The number.</param>
            <param name="format">The format string.</param>
            <exception cref="T:System.ArgumentException">format;Wrong format string !</exception>
        </member>
        <member name="T:Methods.Student">
            <summary>
            The student class.
            </summary>
        </member>
        <member name="M:Methods.Student.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Methods.Student"/> class.
            </summary>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="additionalInfo">The additional information of a student.</param>
        </member>
        <member name="P:Methods.Student.FirstName">
            <summary>
            Gets or sets the first name of a student.
            </summary>
            <value>
            The first name.
            </value>
            <exception cref="T:System.ArgumentNullException">first name;First name cannot be null or empty !</exception>
        </member>
        <member name="P:Methods.Student.LastName">
            <summary>
            Gets or sets the last name of a student.
            </summary>
            <value>
            The last name.
            </value>
            <exception cref="T:System.ArgumentNullException">last name;Last name cannot be null or empty !</exception>
        </member>
        <member name="P:Methods.Student.AdditionalInfo">
            <summary>
            Gets or sets the additional information of a student.
            </summary>
            <value>
            The additional information.
            </value>
            <exception cref="T:System.ArgumentNullException">additional info;Additional info cannot be null or empty !</exception>
        </member>
        <member name="M:Methods.Student.IsOlderThan(Methods.Student)">
            <summary>
            Determines whether the student is older than the other student.
            </summary>
            <param name="other">The other student.</param>
            <returns>If yes - true, otherwise false.</returns>
            <exception cref="T:System.ArgumentException">One or both students do not have valid date of birth information provided.</exception>
        </member>
        <member name="M:Methods.Student.GetBirthday(System.String)">
            <summary>
            Gets the birthday from the additional info of a student.
            </summary>
            <param name="input">The additional info of a student.</param>
            <returns>The student's birthday parsed to DateTime.</returns>
        </member>
    </members>
</doc>
